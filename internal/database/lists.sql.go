// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: lists.sql

package database

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createMovieList = `-- name: CreateMovieList :one
Insert into movie_lists(id, user_id, list)
VALUES ($1, $2, $3)
RETURNING id, user_id, list
`

type CreateMovieListParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
	List   json.RawMessage
}

func (q *Queries) CreateMovieList(ctx context.Context, arg CreateMovieListParams) (MovieList, error) {
	row := q.db.QueryRowContext(ctx, createMovieList, arg.ID, arg.UserID, arg.List)
	var i MovieList
	err := row.Scan(&i.ID, &i.UserID, &i.List)
	return i, err
}

const getMovieListByUser = `-- name: GetMovieListByUser :one
SELECT list from movie_lists
WHERE user_id = $1
`

func (q *Queries) GetMovieListByUser(ctx context.Context, userID uuid.UUID) (json.RawMessage, error) {
	row := q.db.QueryRowContext(ctx, getMovieListByUser, userID)
	var list json.RawMessage
	err := row.Scan(&list)
	return list, err
}

const updateMovieList = `-- name: UpdateMovieList :exec
UPDATE movie_lists
  set list = $1
WHERE user_id = $2
RETURNING id, user_id, list
`

type UpdateMovieListParams struct {
	List   json.RawMessage
	UserID uuid.UUID
}

func (q *Queries) UpdateMovieList(ctx context.Context, arg UpdateMovieListParams) error {
	_, err := q.db.ExecContext(ctx, updateMovieList, arg.List, arg.UserID)
	return err
}
