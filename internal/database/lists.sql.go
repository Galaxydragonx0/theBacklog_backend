// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: lists.sql

package database

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const getBookListByUser = `-- name: GetBookListByUser :one
SELECT list from book_lists
WHERE user_id = $1
`

func (q *Queries) GetBookListByUser(ctx context.Context, userID uuid.UUID) (json.RawMessage, error) {
	row := q.db.QueryRowContext(ctx, getBookListByUser, userID)
	var list json.RawMessage
	err := row.Scan(&list)
	return list, err
}

const getCompletedListByUser = `-- name: GetCompletedListByUser :one
SELECT list from completed_titles
WHERE user_id = $1
`

func (q *Queries) GetCompletedListByUser(ctx context.Context, userID uuid.UUID) (json.RawMessage, error) {
	row := q.db.QueryRowContext(ctx, getCompletedListByUser, userID)
	var list json.RawMessage
	err := row.Scan(&list)
	return list, err
}

const getGameListByUser = `-- name: GetGameListByUser :one
SELECT list from game_lists
WHERE user_id = $1
`

func (q *Queries) GetGameListByUser(ctx context.Context, userID uuid.UUID) (json.RawMessage, error) {
	row := q.db.QueryRowContext(ctx, getGameListByUser, userID)
	var list json.RawMessage
	err := row.Scan(&list)
	return list, err
}

const getMovieListByUser = `-- name: GetMovieListByUser :one
SELECT list from movie_lists
WHERE user_id = $1
`

func (q *Queries) GetMovieListByUser(ctx context.Context, userID uuid.UUID) (json.RawMessage, error) {
	row := q.db.QueryRowContext(ctx, getMovieListByUser, userID)
	var list json.RawMessage
	err := row.Scan(&list)
	return list, err
}

const getShowListByUser = `-- name: GetShowListByUser :one
SELECT list from show_lists
WHERE user_id = $1
`

func (q *Queries) GetShowListByUser(ctx context.Context, userID uuid.UUID) (json.RawMessage, error) {
	row := q.db.QueryRowContext(ctx, getShowListByUser, userID)
	var list json.RawMessage
	err := row.Scan(&list)
	return list, err
}

const updateBookList = `-- name: UpdateBookList :exec
UPDATE book_lists
  set list = $1
WHERE user_id = $2
RETURNING id, user_id, list
`

type UpdateBookListParams struct {
	List   json.RawMessage
	UserID uuid.UUID
}

func (q *Queries) UpdateBookList(ctx context.Context, arg UpdateBookListParams) error {
	_, err := q.db.ExecContext(ctx, updateBookList, arg.List, arg.UserID)
	return err
}

const updateCompletedList = `-- name: UpdateCompletedList :exec
UPDATE completed_titles
  set list = list || $1 ::jsonb
WHERE user_id = $2
RETURNING id, user_id, list
`

type UpdateCompletedListParams struct {
	Column1 json.RawMessage
	UserID  uuid.UUID
}

func (q *Queries) UpdateCompletedList(ctx context.Context, arg UpdateCompletedListParams) error {
	_, err := q.db.ExecContext(ctx, updateCompletedList, arg.Column1, arg.UserID)
	return err
}

const updateGameList = `-- name: UpdateGameList :exec
UPDATE game_lists
  set list = $1
WHERE user_id = $2
RETURNING id, user_id, list
`

type UpdateGameListParams struct {
	List   json.RawMessage
	UserID uuid.UUID
}

func (q *Queries) UpdateGameList(ctx context.Context, arg UpdateGameListParams) error {
	_, err := q.db.ExecContext(ctx, updateGameList, arg.List, arg.UserID)
	return err
}

const updateMovieList = `-- name: UpdateMovieList :exec
UPDATE movie_lists
  set list = $1
WHERE user_id = $2
RETURNING id, user_id, list
`

type UpdateMovieListParams struct {
	List   json.RawMessage
	UserID uuid.UUID
}

func (q *Queries) UpdateMovieList(ctx context.Context, arg UpdateMovieListParams) error {
	_, err := q.db.ExecContext(ctx, updateMovieList, arg.List, arg.UserID)
	return err
}

const updateShowList = `-- name: UpdateShowList :exec
UPDATE show_lists
  set list = $1
WHERE user_id = $2
RETURNING id, user_id, list
`

type UpdateShowListParams struct {
	List   json.RawMessage
	UserID uuid.UUID
}

func (q *Queries) UpdateShowList(ctx context.Context, arg UpdateShowListParams) error {
	_, err := q.db.ExecContext(ctx, updateShowList, arg.List, arg.UserID)
	return err
}
